//
// Created by Alex Zhukov on 8/22/17.
// Copyright (c) 2017 DJI. All rights reserved.
//

import Foundation
import RxSwift

class RxDji {
    static let inspireIframe
    static let inspirePpsHex = "68ee3cb0";
    static let inspireSpsHex = "67640032acb402802dd2a400000fa40003a981810000632e8001650ef7be17844235";

    static func inspireFrames(videoData:Observable<[UInt8]>) -> Observable<AVFrame> {
        var iframeBuf = fromHex(hex: RxDji.inspireIframe)
        iframeBuf.append(contentsOf: acc_unit_delimiter)
        let rawFrames: Observable<[UInt8]> = Observable.just(iframeBuf).concat(videoData)
        let nals = splitNals(bufSource: rawFrames)
        let annb = annexb2mp4(nals: nals)
        let frameNals = annb.toArrayUntil(predicate: { nal in
            return .ACC_UNIT_DELIM == readNal(nalu: nal[4])
        })

        let frames = frameNals.map { _nals -> [UInt8] in
            var fullFrame: [UInt8] = [];
            for nal in _nals {
                fullFrame.append(contentsOf: nal)
            }
            return fullFrame
        }

        let avframes = populatePts(frames: frames)

        return avframes
    }
}
